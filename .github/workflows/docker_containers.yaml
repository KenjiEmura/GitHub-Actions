name: Handling Docker Containers

on:
  repository_dispatch:
    types: [docker]

jobs:
  docker-steps:
    runs-on: ubuntu-latest
    container:
      image: node:10.18.0-jessie
    steps:
      - name: Log the Node version
        run: node -v
      - name: Docker - Echoing 'Hello world!!'
        # With 'uses:' additionally to the normal actions that we already saw (actions/checkout...), we can use Docker images
        uses: docker://node:12.14.1-alpine3.10
        # We can override the default image ENTRYPOINT by using the 'with' property
        with:
          entrypoint: '/bin/echo'
          args: 'Hello world!!'
      - name: Docker - Log Node version from container and from 'run:'
        uses: docker://node:12.14.1-alpine3.10
        with:
          entrypoint: '/usr/local/bin/node'
          args: '-v'

  sample-node-docker-app:
    runs-on: ubuntu-latest
    # Inside the 'services' key, we will have a very similar structure to the one that we have in docker-compose
    services:
      app:
        image: kenjiemura/github-actions-sample-nodeapp
        ports:
          - 3000:3000
      mongo:
        image: mongo
        ports:
          - "27017:27017"
    steps:
      - name: Post a new user to our API
        run: "curl -X POST http://localhost:3000/api/user -H 'Content-Type: application/json' -d '{	\"username\": \"hello\",	\"address\": \"dwded\"}'"
      - name: Get registered users
        run: curl http://localhost:3000/api/users

  random_docker_container:
    runs-on: ubuntu-latest
    container:
      image: node:current-alpine3.12
    steps:
      - name: Log node version
        run: |
          node -v
          cat /etc/os-release